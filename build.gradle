plugins {
    id "java"
    id "org.springframework.boot" version "3.1.3"
    id "io.spring.dependency-management" version "1.1.3"
    id "com.netflix.dgs.codegen" version "6.0.2"
}

group = "com.github.sisimomo"
version = "1.0.1"
sourceCompatibility = JavaVersion.VERSION_17

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    netflixDgsVersion = "7.3.6"
    lombokVersion = "1.18.28"
    lombokMapstructBinding = "0.2.0"
    mapstructVersion = "1.5.5.Final"
    jpamodelgenVersion = "6.2.7.Final"
    springDataJpaEntityGraphVersion = "3.0.1"
    janinoVersion = "3.1.10"
    springBootDataSourceDecoratorVersion = "1.9.0"
    passayVersion = "1.6.3"
    springFilterVersion = "3.1.4"

    nanoidVersion = "2.0.0"
    dataFakerVersion = "2.0.1"
    javaTuplesVersion = "1.2"
}

dependencyManagement {
    imports {
        mavenBom "com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:${netflixDgsVersion}"
    }
}

dependencies {

    // Spring
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    developmentOnly "org.springframework.boot:spring-boot-devtools"

    // DGS
    implementation(platform("com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:${netflixDgsVersion}"))
    implementation "com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter"
    implementation "com.netflix.graphql.dgs:graphql-dgs-pagination"
    // https://netflix.github.io/dgs/scalars/
    implementation "com.netflix.graphql.dgs:graphql-dgs-extended-scalars"
    // https://github.com/graphql-java/graphql-java-extended-validation
    implementation "com.netflix.graphql.dgs:graphql-dgs-extended-validation:${netflixDgsVersion}"

    // MariaDB
    runtimeOnly "org.mariadb.jdbc:mariadb-java-client"

    // Spring Boot DataSource Decorator - adds ability to intercept/logs all SQL queries
    implementation("com.github.gavlyukovskiy:datasource-proxy-spring-boot-starter:${springBootDataSourceDecoratorVersion}")

    // Spring Data JPA EntityGraph
    implementation "com.cosium.spring.data:spring-data-jpa-entity-graph:${springDataJpaEntityGraphVersion}"

    // janino - Logback filter
    implementation "org.codehaus.janino:janino:${janinoVersion}"

    // passay - Password Strength and Rules
    implementation "org.passay:passay:${passayVersion}"

    // Spring Filter - Dynamically filter JPA entities with a user-friendly query syntax.
    implementation "com.turkraft.springfilter:core:${springFilterVersion}"
    implementation "com.turkraft.springfilter:jpa:${springFilterVersion}"

    /********** CODE GENERATION **********/

    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // MapStruct
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    // JPA 2 Metamodel Generator
    annotationProcessor "org.hibernate:hibernate-jpamodelgen:${jpamodelgenVersion}"


    /********** TEST **********/

    // JUnit Jupiter
    testImplementation "org.springframework.boot:spring-boot-starter-test"

    // Data Faker
    testImplementation "net.datafaker:datafaker:${dataFakerVersion}"

    // JavaTuples
    testImplementation "org.javatuples:javatuples:${javaTuplesVersion}"

}

generateJava {
    // DGS
    schemaPaths = ["src/main/resources/schema"]
    // List of directories containing schema files (default value)
    packageName = "com.github.sisimomo.graphqlsakila.dgscodegen"
    // The package name to use to generate sources
    typeMapping = [
            "Upload"          : "org.springframework.web.multipart.MultipartFile",
            "DateTimeTimezone": "java.time.Instant",
            "UUID"            : "java.util.UUID",
            "Decimal"         : "java.math.BigDecimal"
    ]
}

test {
    useJUnitPlatform()
}
